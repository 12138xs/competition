
services:
  # ---------------------------------------------------
  # 1. 主应用服务 (运行 Main.py, 作为总调度器)
  # ---------------------------------------------------
  main_app:
    build:
      context: ./main_app
    ports:
      - "7860:7860"
    volumes:
      - ./main_app:/app
      - ./test_data:/app/test_data
    environment:
      # Embedding服务配置
      - EMBEDDING_SERVER_URL=http://embedding-server/embed
      # LLM服务配置  
      - LLM_SERVER_URL=http://llm-server/generate
      # MinIO存储配置
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      # Milvus向量数据库配置
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
    depends_on:
      standalone:
        condition: service_healthy # 关键：等待Milvus完全健康后再启动主应用
      embedding-server:
        condition: service_started
      llm-server:
        condition: service_started
    networks:
      - rag_net
    command: streamlit run main.py --server.port=7860 --server.address=0.0.0.0 --server.enableCORS=false

  # ---------------------------------------------------
  # 2. Embedding 服务
  # ---------------------------------------------------
  embedding-server:
    build:
      context: ./embedding_server
    ports:
      - "8001:80"
    volumes:
      - ./embedding_server:/app
    networks:
      - rag_net

  # ---------------------------------------------------
  # 3. LLM 推理服务
  # ---------------------------------------------------
  llm-server:
    build:
      context: ./llm_server
    ports:
      - "8002:80"
    volumes:
      - ./llm_server:/app
      # - /path/to/your/local/models:/app/models # 挂载本地模型
    networks:
      - rag_net
    # deploy:
    #   resources:
        # limits:
        #   memory: 12G
        # reservations:
        #   memory: 8G

  # ---------------------------------------------------
  # 4. Milvus 依赖服务: etcd (来自官方配置)
  # ---------------------------------------------------
  etcd:
    container_name: rag-etcd # 为容器命名以方便管理
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./volumes/etcd:/etcd # 将数据持久化到本地volumes目录
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag_net

  # ---------------------------------------------------
  # 5. Milvus 依赖与应用共用的服务: MinIO (来自官方配置)
  # ---------------------------------------------------
  minio:
    container_name: rag-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag_net

  # ---------------------------------------------------
  # 6. Milvus 核心服务: Standalone (来自官方配置)
  # ---------------------------------------------------
  standalone:
    container_name: rag-milvus-standalone
    image: milvusdb/milvus:v2.4.1 # 使用一个稳定的正式版镜像
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      # 以下为新增的配置，确保Milvus能正确访问MinIO
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_KEY_ID: minioadmin
      MINIO_USE_SSL: "false"
    volumes:
      - ./volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s # 给予Milvus更长的启动时间
      timeout: 20s
      retries: 3
    networks:
      - rag_net

# ---------------------------------------------------
# 顶层配置
# ---------------------------------------------------

# 定义一个所有服务共享的自定义网络
networks:
  rag_net:
    name: rag_net # 显式命名网络
    driver: bridge

# Docker Compose不会自动创建目录，但会使用这些卷
# volumes:
#   etcd_data:
#   minio_data:
#   milvus_data:
